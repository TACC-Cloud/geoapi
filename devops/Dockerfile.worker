FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    vim \
    libtiff-dev \
    libgeotiff-dev \
    libgdal-dev \
    libboost-system-dev \
    libboost-thread-dev \
    libboost-filesystem-dev \
    libboost-program-options-dev  \
    libboost-regex-dev \
    libboost-iostreams-dev \
    git \
    cmake \
    build-essential \
    python3.9 \
    python3-pip \
    python3-dev \
    ffmpeg \
    unzip \
    wget \
    libc6-dev \
    libtbb-dev\
    libcgal-dev

WORKDIR /opt

# Install PotreeConverter
# c2328c4 is v2.1.1 and some additional fixes
RUN git clone -b develop https://github.com/potree/PotreeConverter.git && cd PotreeConverter && git checkout c2328c4 && \
mkdir build && cd build && \
cmake .. -DCMAKE_BUILD_TYPE=Release && \
make

# Setup our page template for PotreeConverter
ADD devops/misc/potree/page_template/nsf_logo.png /opt/PotreeConverter/build/resources/page_template/
ADD devops/misc/potree/page_template/nsf_logo_snippet.txt /tmp/
RUN sed -i '/<\/script>/r /tmp/nsf_logo_snippet.txt' /opt/PotreeConverter/build/resources/page_template/viewer_template.html

# Install Miniforge to get pdal
RUN wget -q -O miniforge.sh https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-$(uname -m).sh && \
    sh miniforge.sh -b -p /opt/conda && \
    rm miniforge.sh
ENV PATH="/opt/conda/bin:${PATH}"

# Create a conda environment with Python 3.9 and activate it
RUN conda create -n py39env python=3.9 -y
SHELL ["conda", "run", "-n", "py39env", "/bin/bash", "-c"]

# Install PDAL using conda
RUN conda install -c conda-forge pdal -y

# Install needed python packages using poetry
RUN pip install poetry==1.8.3
RUN poetry config virtualenvs.create false
COPY devops/pyproject.toml devops/poetry.lock ./
RUN poetry install

# Populate image with geoapi and set PYTHONPATH
RUN mkdir app
COPY geoapi /app/geoapi
WORKDIR /app/geoapi
ENV PYTHONPATH "${PYTHONPATH}:/app"

# Create an entrypoint script that activates our conda environment
RUN echo '#!/bin/bash' > /usr/local/bin/entrypoint.sh && \
    echo 'set -e' >> /usr/local/bin/entrypoint.sh && \
    echo '' >> /usr/local/bin/entrypoint.sh && \
    echo '# Activate conda and the specific environment' >> /usr/local/bin/entrypoint.sh && \
    echo '. /opt/conda/etc/profile.d/conda.sh' >> /usr/local/bin/entrypoint.sh && \
    echo 'conda activate py39env' >> /usr/local/bin/entrypoint.sh && \
    echo '' >> /usr/local/bin/entrypoint.sh && \
    echo '# Execute the passed command' >> /usr/local/bin/entrypoint.sh && \
    echo 'exec "$@"' >> /usr/local/bin/entrypoint.sh && \
    chmod +x /usr/local/bin/entrypoint.sh

# Set the entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# activate conda (to handle when user starts a bash via docker exec)
RUN echo '. /opt/conda/etc/profile.d/conda.sh' >> /root/.bashrc && \
    echo 'conda activate py39env' >> /root/.bashrc

# Set a default command (can be overridden by docker-compose)
CMD ["bash"]
