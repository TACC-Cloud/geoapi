FROM python:3.11-slim AS python-base

LABEL maintainer="DesignSafe-CI <designsafe-ci@tacc.utexas.edu>"

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    vim \
    libtiff-dev \
    libgeotiff-dev \
    libgdal-dev \
    libboost-system-dev \
    libboost-thread-dev \
    libboost-filesystem-dev \
    libboost-program-options-dev  \
    libboost-regex-dev \
    libboost-iostreams-dev \
    git \
    cmake \
    build-essential \
    ffmpeg \
    unzip \
    wget \
    libc6-dev \
    libtbb-dev\
    libcgal-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /opt

# Install PotreeConverter
# c2328c4 is v2.1.1 and some additional fixes
RUN git clone -b develop https://github.com/potree/PotreeConverter.git \
    && cd PotreeConverter \
    && git checkout c2328c4 \
    && mkdir build \
    && cd build \
    && cmake .. -DCMAKE_BUILD_TYPE=Release \
    && make

# Setup our page template for PotreeConverter
COPY devops/misc/potree/page_template/nsf_logo.png /opt/PotreeConverter/build/resources/page_template/
COPY devops/misc/potree/page_template/nsf_logo_snippet.txt /tmp/

#  - add nsf logo
RUN sed -i '/<body>/r /tmp/nsf_logo_snippet.txt' /opt/PotreeConverter/build/resources/page_template/viewer_template.html

#  - remove reference to background image
RUN sed -i 's/style="[^"]*background-image:[^"]*"//' /opt/PotreeConverter/build/resources/page_template/viewer_template.html

# Install Miniforge for our Python environment (provides easier PDAL installation)
RUN wget -q -O miniforge.sh https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-$(uname -m).sh \
    && sh miniforge.sh -b -p /opt/conda \
    && rm miniforge.sh

ENV PATH="/opt/conda/bin:${PATH}"

# Create a conda environment with Python 3.11 and activate it
RUN conda create -n py311env python=3.11 -y
SHELL ["conda", "run", "-n", "py311env", "/bin/bash", "-c"]

# Install PDAL using conda
RUN conda install -c conda-forge pdal -y

# https://python-poetry.org/docs/configuration/#using-environment-variables
ENV POETRY_VERSION=1.8 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"

ENV PATH="$VENV_PATH/bin:$POETRY_HOME/bin:$PATH"

# Install poetry version $POETRY_VERSION to $POETRY_HOME
RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel \
    && python3 -m venv "$POETRY_HOME" \
    && "$POETRY_HOME/bin/pip" install --no-cache-dir poetry=="$POETRY_VERSION"

COPY devops/pyproject.toml devops/poetry.lock ./

COPY geoapi /app/geoapi

# Create an entrypoint script that activates our conda environment
RUN echo '#!/bin/bash' > /usr/local/bin/entrypoint.sh && \
    echo 'set -e' >> /usr/local/bin/entrypoint.sh && \
    echo '' >> /usr/local/bin/entrypoint.sh && \
    echo '# Activate conda and the specific environment' >> /usr/local/bin/entrypoint.sh && \
    echo '. /opt/conda/etc/profile.d/conda.sh' >> /usr/local/bin/entrypoint.sh && \
    echo 'conda activate py39env' >> /usr/local/bin/entrypoint.sh && \
    echo '' >> /usr/local/bin/entrypoint.sh && \
    echo '# Execute the passed command' >> /usr/local/bin/entrypoint.sh && \
    echo 'exec "$@"' >> /usr/local/bin/entrypoint.sh && \
    chmod +x /usr/local/bin/entrypoint.sh

# Set the entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# activate conda (to handle when user starts a bash via docker exec)
RUN echo '. /opt/conda/etc/profile.d/conda.sh' >> /root/.bashrc && \
    echo 'conda activate py39env' >> /root/.bashrc

# Set a default command (can be overridden by docker-compose)
CMD ["bash"]

##############
# `development` image target is used for local development
FROM python-base AS development

# Install dev dependencies
RUN "$POETRY_HOME/bin/poetry" install --with dev,worker

WORKDIR /app/geoapi

##############
# `production` image target is used for deployed runtime environments
FROM python-base AS production

# Install runtime dependencies
RUN "$POETRY_HOME/bin/poetry" install --with worker

WORKDIR /app/geoapi
