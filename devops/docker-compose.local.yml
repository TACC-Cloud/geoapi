name: geoapi

volumes:
  assets:
  pgdata:

networks:
  geoapi:

x-worker-base: &worker-base  # Base fragment for worker services
  # See: https://docs.docker.com/reference/compose-file/fragments/
  image: taccaci/geoapi-workers:local
  volumes:
    - ../:/app
    - assets:/assets
  environment:
    - MAPILLARY_CLIENT_ID
    - MAPILLARY_CLIENT_SECRET
    - MAPILLARY_CLIENT_TOKEN
    - APP_ENV=local
    - ASSETS_BASE_DIR=/assets
    - DESIGNSAFE_URL=${DESIGNSAFE_URL}
  stdin_open: true
  tty: true
  depends_on:
    rabbitmq:
      condition: service_healthy
    assets-init:
      condition: service_completed_successfully

services:
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    command: redis-server --loglevel warning
    container_name: geoapi_redis
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 30s
      retries: 5

  rabbitmq:
    image: rabbitmq:4-management
    ports:
      - 15672:15672
    container_name: geoapi_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=dev
      - RABBITMQ_DEFAULT_PASS=dev
      - RABBITMQ_DEFAULT_VHOST=dev
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 30s
      retries: 5

  postgres:
    image: postgis/postgis:11-3.3-alpine
    volumes:
      - pgdata:/var/lib/postgresql/data
    container_name: geoapi_postgres
    environment:
      - POSTGRES_PASSWORD=dev
      - POSTGRES_USER=dev
      - POSTGRES_DB=dev

  nginx:
    image: nginx:stable
    ports:
      - 8888:80
    volumes:
      - assets:/assets
      - ./local_conf/nginx.conf:/etc/nginx/nginx.conf
    container_name: geoapi_nginx
    depends_on:
      - backend
      - titiler

  workers:
    <<: *worker-base  # Reuses worker-base fragment defined at start
    container_name: geoapi_workers
    command: celery -A geoapi.celery_app worker -l info -Q default -n default_worker@geoapi --uid=1100 --gid=1100

  workers-heavy:
    <<: *worker-base  # Reuses worker-base fragment defined at start
    container_name: geoapi_workers_heavy
    command: celery -A geoapi.celery_app worker -l info -Q heavy --concurrency=6 --uid=1100 --gid=1100

  celerybeat:
    <<: *worker-base  # Reuses worker-base fragment defined at start
    container_name: geoapi_celerybeat
    command: "celery -A geoapi.celery_app beat --schedule=/var/run/celery/celerybeat-schedule -l info --uid=1100 --gid=1100"

  titiler:
    image: ghcr.io/developmentseed/titiler:0.23.1
    platform: linux/amd64
    container_name: geoapi_titiler
    environment:
      # GDAL settings
      - GDAL_CACHEMAX=1024
      - GDAL_DISABLE_READDIR_ON_OPEN=EMPTY_DIR
      - VSI_CACHE=TRUE
      - VSI_CACHE_SIZE=1000000
      # CORS settings - CRITICAL
      - TITILER_API_CORS_ORIGINS=http://localhost:4200,http://localhost:8888
      - TITILER_API_CORS_ALLOW_CREDENTIALS=true
    volumes:
      - assets:/assets:ro

  backend:
    image: taccaci/geoapi:local
    volumes:
      - ../:/app
      - assets:/assets
    ports:
      - 8000:8000
    environment:
      - APP_ENV=local
      - ASSETS_BASE_DIR=/assets
      - DESIGNSAFE_URL
      - SESSION_SECRET_KEY
      - TAPIS_CLIENT_ID
      - TAPIS_CLIENT_KEY
      - MAPILLARY_CLIENT_ID
      - MAPILLARY_CLIENT_SECRET
      - MAPILLARY_CLIENT_TOKEN
      - LITESTAR_WARN_IMPLICIT_SYNC_TO_THREAD=0
    stdin_open: true
    tty: true
    container_name: geoapi_backend
    command: "litestar run --reload --host 0.0.0.0 --port 8000 --debug"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      redis:
        condition: service_healthy
      assets-init:
        condition: service_completed_successfully

  assets-init:
    image: taccaci/geoapi-workers:local
    volumes:
      - assets:/assets
    command: ["sh", "-c", "chown -R 1100:1100 /assets && chmod -R 775 /assets"]
