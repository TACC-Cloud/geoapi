---
apiVersion: v1
kind: ConfigMap
metadata:
  name: geoapi-nginx-conf
data:
  site.conf: |
      server {
          include /etc/nginx/mime.types;
          client_max_body_size 10g;

          location / {
               add_header "Access-Control-Allow-Origin"  *;

              # Preflighted requests
              if ($request_method = OPTIONS ) {
                  add_header "Access-Control-Allow-Origin"  *;
                  add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD, PUT, DELETE";
                  add_header "Access-Control-Allow-Headers" "*";
                  add_header 'Access-Control-Max-Age' 1728000;
                  add_header 'Content-Length' 0;
                  return 204;
              }
              rewrite ^/api(.*) /$1 break;
              proxy_pass http://geoapi:5000;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_cache_bypass $http_upgrade;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          }

          location /assets {
              max_ranges 0;
              expires 30d;
              add_header "Access-Control-Allow-Origin"  *;
              alias /assets/;
          }
      }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: pgdata
  name: pgdata
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: rbd
  resources:
    requests:
      storage: 5G
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    io.kompose.service: geoapi-rabbitmq
  name: geoapi-rabbitmq
spec:
  ports:
    - port: 5672
      targetPort: 5672
  selector:
    io.kompose.service: geoapi-rabbitmq
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    io.kompose.service: geoapi-postgres
  name: geoapi-postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    io.kompose.service: geoapi-postgres
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    io.kompose.service: geoapi-nginx
  name: geoapi-nginx
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
  selector:
    io.kompose.service: geoapi-nginx
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    io.kompose.service: geoapi
  name: geoapi
spec:
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    io.kompose.service: geoapi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    io.kompose.service: geoapi-rabbitmq
  name: geoapi-rabbitmq
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.service: geoapi-rabbitmq
    spec:
      containers:
      - env:
        - name: RABBITMQ_DEFAULT_PASS
          value: dev
        - name: RABBITMQ_DEFAULT_USER
          value: dev
        - name: RABBITMQ_DEFAULT_VHOST
          value: dev
        image: rabbitmq
        ports:
          - containerPort: 5672
        name: geoapi-rabbitmq
        resources: {}
      restartPolicy: Always
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    io.kompose.service: geoapi-nginx
  name: geoapi-nginx
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: geoapi-nginx
    spec:
      containers:
      - image: nginx
        name: geoapi-nginx
        resources: {}
        ports:
          - containerPort: 80
        volumeMounts:
          - mountPath: /assets
            name: assets
          - mountPath: /etc/nginx/conf.d
            name: config-volume
      restartPolicy: Always
      volumes:
        - name: config-volume
          configMap:
            name: geoapi-nginx-conf
        - name: assets
          cephfs:
            monitors:
              - 172.16.120.3:6789
              - 172.16.120.4:6789
              - 172.16.120.5:6789
            path: /jmeiring
            user: jmeiring
            readOnly: false
            secretRef:
              name: ceph-secret
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    io.kompose.service: geoapi-workers
  name: geoapi-workers
spec:
  replicas: 3
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: geoapi-workers
    spec:
      containers:
      - args:
        - celery
        - -A
        - celery_app
        - worker
        env:
          - name: ASSETS_BASE_DIR
            value: /assets
          - name: FLASK_APP
            value: /app/geoapi/app.py
          - name: APP_ENV
            value: production
          - name: RABBITMQ_HOSTNAME
            value: geoapi-rabbitmq
          - name: RABBITMQ_VHOST
            value: dev
          - name: RABBITMQ_PASSWD
            value: dev
          - name: RABBITMQ_USERNAME
            value: dev
          - name: DB_USERNAME
            value: dev
          - name: DB_HOST
            value: geoapi-postgres
          - name: DB_PASSWD
            value: dev
          - name: DB_NAME
            value: dev
        image: taccaci/geoapi-workers:latest
        name: geoapi-workers
        resources: {}
        volumeMounts:
        - mountPath: /assets
          name: assets
      hostname: geoapi-workers
      restartPolicy: Always
      volumes:
      - name: assets
        cephfs:
          monitors:
            - 172.16.120.3:6789
            - 172.16.120.4:6789
            - 172.16.120.5:6789
          path: /jmeiring
          user: jmeiring
          readOnly: false
          secretRef:
            name: ceph-secret

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    io.kompose.service: geoapi-postgres
  name: geoapi-postgres
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: geoapi-postgres
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          value: dev
        - name: POSTGRES_PASSWORD
          value: dev
        - name: POSTGRES_USER
          value: dev
        image: mdillon/postgis
        name: geoapi-postgres
        ports:
        - containerPort: 5432
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: pgdata
          subPath: postgres
      hostname: geoapi-postgres
      restartPolicy: Always
      volumes:
      - name: pgdata
        persistentVolumeClaim:
          claimName: pgdata
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    io.kompose.service: geoapi
  name: geoapi
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: geoapi
    spec:
      containers:
      - args:
        - gunicorn
        - -w
        - "4"
        - -b
        - 0.0.0.0:5000
        - app:app
        env:
        - name: ASSETS_BASE_DIR
          value: /assets
        - name: FLASK_APP
          value: /app/geoapi/app.py
        - name: APP_ENV
          value: production
        - name: RABBITMQ_HOST
          value: geoapi-rabbibtmq
        - name: RABBITMQ_VHOST
          value: dev
        - name: RABBITMQ_PASSWD
          value: dev
        - name: RABBITMQ_USERNAME
          value: dev
        - name: DB_USERNAME
          value: dev
        - name: DB_HOST
          value: geoapi-postgres
        - name: DB_PASSWD
          value: dev
        - name: DB_NAME
          value: dev
        - name: JWT_SECRET_KEY
          value: your-256-bit-secret
        image: taccaci/geoapi:latest
        name: geoapi
        ports:
        - containerPort: 5000
        resources: {}
        stdin: true
        tty: true
        volumeMounts:
        - mountPath: /assets
          name: assets
      hostname: geoapi
      restartPolicy: Always
      volumes:
        - name: assets
          cephfs:
            monitors:
              - 172.16.120.3:6789
              - 172.16.120.4:6789
              - 172.16.120.5:6789
            path: /jmeiring
            user: jmeiring
            readOnly: false
            secretRef:
              name: ceph-secret
---
#apiVersion: extensions/v1beta1
#kind: Ingress
#metadata:
#  name: geoapi-ingress
#  annotations:
#    nginx.ingress.kubernetes.io/enable-cors: "true"
#spec:
#  rules:
#  - http:
#      paths:
#      - path: /assets
#        backend:
#          serviceName: geoapi-nginx
#          servicePort: 8080
#      - path: /
#        backend:
#          serviceName: geoapi
#          servicePort: 5000
