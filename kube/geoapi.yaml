---
apiVersion: v1
kind: ConfigMap
metadata:
  name: geoapi-nginx-conf
data:
  site.conf: |
      server {
          include /etc/nginx/mime.types;
          client_max_body_size 10g;

          location / {
               add_header "Access-Control-Allow-Origin"  *;

              # Preflighted requests
              if ($request_method = OPTIONS ) {
                  add_header "Access-Control-Allow-Origin"  *;
                  add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD, PUT, DELETE";
                  add_header "Access-Control-Allow-Headers" "*";
                  add_header 'Access-Control-Max-Age' 1728000;
                  add_header 'Content-Length' 0;
                  return 204;
              }
              rewrite ^/api(.*) /$1 break;
              proxy_pass http://geoapi:5000;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_cache_bypass $http_upgrade;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          }

          location /assets {
              max_ranges 0;
              expires 30d;
              add_header "Access-Control-Allow-Origin"  *;
              alias /assets/;
          }
      }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: geoapi-environment-vars
data:
  # These are for the default creds for the rabbitmq container
  RABBITMQ_DEFAULT_USER: geoapi
  RABBITMQ_DEFAULT_VHOST: geoapi
  # These are for the postgres container itself
  POSTGRES_DB: geoapi
  POSTGRES_USER: geoapi


  ASSETS_BASE_DIR: /assets/
  JWT_SECRET_KEY: your-256-bit-secret
  FLASK_APP: /app/geoapi/app.py
  APP_ENV: production
  RABBITMQ_HOSTNAME: geoapi-rabbitmq
  RABBITMQ_VHOST: geoapi
  RABBITMQ_USERNAME: geoapi
  DB_USERNAME: geoapi
  DB_HOST: geoapi-postgres
  DB_NAME: geoapi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: pgdata
  name: pgdata
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: rbd
  resources:
    requests:
      storage: 10G
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    app: geoapi-rabbitmq
  name: geoapi-rabbitmq
spec:
  ports:
    - port: 5672
      targetPort: 5672
  selector:
    app: geoapi-rabbitmq
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    app: geoapi-postgres
  name: geoapi-postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: geoapi-postgres
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    app: geoapi-nginx
  name: geoapi-nginx
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: geoapi-nginx
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    app: geoapi
  name: geoapi
spec:
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    app: geoapi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    app: geoapi-rabbitmq
  name: geoapi-rabbitmq
spec:
  replicas: 1
  strategy: {}
  selector:
    matchLabels:
      app: geoapi-rabbitmq
  template:
    metadata:
      labels:
        app: geoapi-rabbitmq
    spec:
      containers:
      - env:
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: password
        envFrom:
          - configMapRef:
              name: geoapi-environment-vars
        image: rabbitmq
        ports:
          - containerPort: 5672
        name: geoapi-rabbitmq
        resources: {}
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    app: geoapi-nginx
  name: geoapi-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: geoapi-nginx
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: geoapi-nginx
    spec:
      containers:
      - image: nginx
        name: geoapi-nginx
        resources: {}
        ports:
          - containerPort: 80
        volumeMounts:
          - mountPath: /assets
            name: assets
          - mountPath: /etc/nginx/conf.d
            name: config-volume
      restartPolicy: Always
      volumes:
        - name: config-volume
          configMap:
            name: geoapi-nginx-conf
        - name: assets
          cephfs:
            monitors:
              - 172.16.120.3:6789
              - 172.16.120.4:6789
              - 172.16.120.5:6789
            path: /jmeiring/production
            user: jmeiring
            readOnly: false
            secretRef:
              name: ceph-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    app: geoapi-workers
  name: geoapi-workers
spec:
  replicas: 3
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: geoapi-workers
  template:
    metadata:
      labels:
        app: geoapi-workers
    spec:
      containers:
      - args:
        - celery
        - -A
        - celery_app
        - worker
        envFrom:
          - configMapRef:
              name: geoapi-environment-vars
        env:
          - name: RABBITMQ_PASSWD
            valueFrom:
              secretKeyRef:
                name: rabbitmq
                key: password
          - name: DB_PASSWD
            valueFrom:
              secretKeyRef:
                name: postgres
                key: password

        image: taccaci/geoapi-workers:latest
        name: geoapi-workers
        resources: {}
        volumeMounts:
        - mountPath: /assets
          name: assets
      hostname: geoapi-workers
      restartPolicy: Always
      volumes:
      - name: assets
        cephfs:
          monitors:
            - 172.16.120.3:6789
            - 172.16.120.4:6789
            - 172.16.120.5:6789
          path: /jmeiring/production
          user: jmeiring
          readOnly: false
          secretRef:
            name: ceph-secret

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    app: geoapi-postgres
  name: geoapi-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: geoapi-postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: geoapi-postgres
    spec:
      containers:
      - env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
        envFrom:
          - configMapRef:
              name: geoapi-environment-vars
        image: mdillon/postgis
        name: geoapi-postgres
        ports:
        - containerPort: 5432
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: pgdata
          subPath: postgres
      hostname: geoapi-postgres
      restartPolicy: Always
      volumes:
      - name: pgdata
        persistentVolumeClaim:
          claimName: pgdata

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.16.0 (0c01309)
  labels:
    app: geoapi
  name: geoapi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: geoapi
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: geoapi
    spec:
      containers:
      - args:
        - gunicorn
        - -w
        - "4"
        - -b
        - 0.0.0.0:5000
        - app:app
        envFrom:
          - configMapRef:
              name: geoapi-environment-vars
        env:
          - name: RABBITMQ_PASSWD
            valueFrom:
              secretKeyRef:
                name: rabbitmq
                key: password
          - name: DB_PASSWD
            valueFrom:
              secretKeyRef:
                name: postgres
                key: password
        image: taccaci/geoapi:latest
        name: geoapi
        ports:
        - containerPort: 5000
        resources: {}
        stdin: true
        tty: true
        volumeMounts:
        - mountPath: /assets
          name: assets
      hostname: geoapi
      restartPolicy: Always
      volumes:
        - name: assets
          cephfs:
            monitors:
              - 172.16.120.3:6789
              - 172.16.120.4:6789
              - 172.16.120.5:6789
            path: /jmeiring/production
            user: jmeiring
            readOnly: false
            secretRef:
              name: ceph-secret
---
apiVersion: batch/v1
kind: Job
metadata:
  name: geoapi-migrations
spec:
  parallelism: 1
  backoffLimit: 5
  activeDeadlineSeconds: 100
  template:
    spec:
      containers:
      - name: geoapi
        envFrom:
          - configMapRef:
              name: geoapi-environment-vars
        env:
          - name: RABBITMQ_PASSWD
            valueFrom:
              secretKeyRef:
                name: rabbitmq
                key: password
          - name: DB_PASSWD
            valueFrom:
              secretKeyRef:
                name: postgres
                key: password
        image: taccaci/geoapi:latest
        command: ["alembic", "upgrade", "head"]
      restartPolicy: Never
